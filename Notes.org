* Intro

- Kia ora koutou . I'm Brooke Mitchell and this is my talk, I've got the keys! Using lenses and transducers simplify your life.
    
- Thanks for having me for my first ever talk.

- These are my experiences trying to simplify data manipulation in a redux app I built. 

* Welcome

- This talk is pretty code example heavy but try not to get too caught up in following every detail about what it happening. 

- Since long code examples make me sleepy. There are helpful talk themed images breaking them up. Try to focus on those.

* Slides and source code

- The focus of this talk is on trying functional techniques to manage objects and evaluating their usefulness. 

- If you get interested you can try the examples from the slides in a ramda repl later. 

- These are the github projects for the talk and the example project with all the links and things I will probably forget to say. This talk doubles as it's own readme file. So you can trust yourself not to take notes.

* Redux and keys

- So we'll have to cover a little bit of ground before we start, both in understanding enough redux and functional techniques we'll be using before we start. This might seem like a lot, but we are about to learn redux is mostly about managing one large object we call state. 

- this talk should hopefully also teach you functional ways to deal with pojos (plain old JavaScript objects)

-  And since this talk is about objects, we'd better talk about how we access properties in objects, through keys. 

- When we talk about keys, I think there is something slightly magical and metaphorical about them. For that reason I have been thinking about keys a lot, and so it made sense to include someone that also talks about keys a lot, a hip-hop producer named DJ Khaled.

* DJ Khaled

 - play jay-z - the keys clip...

- For those unfamiliar with the work of DJ Khaled, you could briefly describe him as a music mogul and internet celebrity. While DJ Khaled is a famous music producer and snapchat celebrity, most importantly for this talk, he has a life philosophy based around 'keys' to success. So we'll be talking about keys in both senses, managing objects and lifelong learnings. Despite the gimmicky theme that's what I'm getting at.

* Ramda

- I'm going to use the Ramda library for nearly everything in the examples in this talk. any functional library you use, or one you even make up yourself, should have these tools. 

- I know we should be wary of tool dependence here, but ramda is a useful grab bag of time honoured functional programming tricks that it is handy to know. So I feel any time you spend learning it will be useful in other libraries and languages. Many other libraries do the same thing and they should be able to be used interchangeably.

- These are three functional techniques from ramda you're going to see a lot in this talk. Most of the other code examples you'll only need the gist of, but if you want to pay attention now would be a good time.
  
- So the first amazingly useful functional trick we'll using is: 

- Auto-currying. Comes by default in ramda, no effort required. This means you can provide one argument at a time to get a back a function waiting for the next argument.

* Ramda

- Function composition. Perhaps the biggest key alert, composition is the key of keys. Take a bunch of nested functions and you can lay them out as arguments in the same order as you see them nested. Now you can really go to town stacking them up. They build up from the right, just like the nested function whose first call is from the inside. You can also use pipe if you prefer thinking forwards.


* Ramda

- R.ap, perhaps the one people are least likely to have seen before

- It's related to applicatives. Don't worry about that. Haskell fans might want to talk to you about their power but here we're just going to use them in a simple way, taking a list of functions , and applying them to an argument, ten in this case. It returns an list of results from applying each function to each argument. 

- There many other ways to use ap's powers but that's all we require here.

* Redux

Anyway back to the app I was building. Sadly all my efforts were spent on an internal tool for a closed source environment. But I've made you an that also shows some of the problems that as redux state gets really large.

 ...Show app.
 
- The problem with this app is because the state tree is large, and redux forces you to return a new object every time, editing values gets slow. If you run this example on the master branch chrome warns you the response time for ui is > 300 ms.

 - Two things you could do to fix that: 
- use immutable data structures like immutable.js 

- or break up your subscriptions to state changes much further down the component tree. So we have many subscriptions interested in smaller sets of changes.

- But lets not do either. Instead of doing that lets just refactor and see what falls out. 

- Major key: See what you can ignore. More a tip for programming than for life.

- Before I show some of the refactorings I think are useful for dealing with objects, I'll try and offer as quick an overview of redux as possible. Please don't be mad if you are a redux expert.

- Here is the redux app flow from 10,000 feet: 

- There is a 'store' that keeps all of your state in one object 
- You can subscribe to store updates to map them to your view. 

  You can also dispatch actions to change the state.
1. You call store.dispatch(action)
2. The Redux store calls any reducer functions (called 'reducers') that will make changes to state.
3. The Redux store replaces the old state tree with a new state tree.
   
Hopefully my overview shows you that redux is very similar to mapping and reducing in vanilla js. That feels like enough learning for today.

* Redux Reducer

- Coincidentally a 'reducer' in redux is effectively like an array.'reduce' for a state object, I like to think of it like so...

- In reality that list of actions is provided by redux's dispatch function and unfolds over time, one action at a time, so its like an observer, but I think its a good way to conceptualize it.

Take special note of the line that looks like this:
#+BEGIN_SRC js 
return Object.assign({}, oldObject, newObject)
#+END_SRC

- Major key alert: don't mutate your state in a reducer. It will be ignored anyway in the diff comparison. 

- there's a poorly underlined link properly discussing mutation. Basically it means keys and values of an object are unchangeable. In practice that means we need to return a fresh new copy of the object every time.

* Redux Mapper

- OK now for the mapper. Often called mapStateToProps as a convention.
- This is how you show your view derived from redux state.
- Just a note that you dont need to use react with redux
- This is a state mapper using nanocomponent. 
- An very cool new component library implements react fiber for super fast components but... works on any framework or on its own. Its comparable with all the frameworks and x-to-js compilers (even elm) and frees us from writing the same components like inifite list each time a new framework is out. I really like this.

Let's finally get to our app.

- So two things we care about: reducing and mapping an immutable object. That is my summary of redux that should get us there.

* Refactoring a real app

- Here is the examples troubled mapper. I decided to implement some feature creep by adding user management. Again you dont need to read this, just get a bad feeling that all this logic shouldn't really be in a view.
  
- Also I'm sure one of these deeply nested prop accesses will fail.

- Key alert: you can use ramda/lodash 'get' instead to avoid throwing errors.
  
- Let's start refactoring this.

* Bad map fix, step 1: create selectors

  - My first step is to create selectors to get this property access out of the view and somewhere else. 

- Usually I just make a selectors section next to my reducer, and work from there, it helps with testing, and we remove the any logic or intermediary functions from the view.

- We could go further but this is pretty good, at least these are easily composable and testable now. 

- One thing we could do is take this even further and compose a mapStateToProps function in the reducers file, one that combine all the selectors. 

* Bad map fix, step 2: Composing with ramda

- Which is this

- Here we are treating our functions as applicatives then zipping them together into an object for our view.

- We can keep looking common property access and compose selectors together. You might find you'll doing one kind of property access in many places.

- Wayyy sweeter. tbh this is probably the sweet spot. Go deeper if needs require.

Major key: compose selectors.

* Alternative Step 2: Reselect

-   The alternative to composing selectors yourself is to use a library like reselect, to do the selector composition. 

- My issue with reselect is it re-invents the wheel a bit when you could just take the time to learn composition and not sweat the difference when frameworks change.

- However one free win you get with reselect is it memoizes the final function for you. This means that if anytime the result from all the selectors is the same, createSelector doesn't bother calculating the state again, it just returns the stored value for state it keeps in memory.

so key alert: Memoizing, saves you effort, sometimes. 

- But I'm just not sure we should let libraries do our composition, so I also have an alternative.

* Alternative Step 2.5: Ramda Reselect

- Compose your own reselect.

- What you could do instead though is write it you self. 

- Ok so this is my version of reselect in what could be one line,  and probably good enough for most scenarios. 

- This does the same thing as createSelector, takes the state, runs it through a list of selectors (except the last one) then applies those values to the last function, which has been memoized.

- Now we dont have to learn another library. There are other capabilities reselect has which I've never used. Like props, you'll notice if you go through my example that I pretty much never use props in components that subscribe to state changes.

- Thats another key I've found, focus on state for stateful components and just use props with pure components to keep things simple. Things don't always work out that way but I find that really helps me.

- I have a more fully featured version of ramda-reselect that lets you use props and passes reselects tests. Its up there as a npm library in case you ever want to use it, or hopefully just look at the source, taking props bumps the lines of code to about three. Hopefully gives you an idea of the power of composing.

* Alternative Step 2.5: Ramda Reselect

- So I feel like we've slimmed down our mapper pretty nicely.

Now lets take a look at our reducer.

* Awkward reducer

 - Here is the real reducer for the roadworks editing app, this is the function for setting the new shape of the state called every time an 'action' is dispatched. Sorry its so long please allow your eyes to glaze over. 
   
- Where the slowness is coming from.

- Those ellipsis are a proposed es2017 shortcut to spread an object. You can think of those as the same as an object assign. That assign is what  the slowness is.

* Reducer refactor pt1

- Anyway that reducer is obviously too much to feel good about. The advice you see in the redux docs is to to break functions out, and I think you can easily see how to do that. 

- To me breaking out functions feels a little dishonest.  It looks nice but to me doesn't actually reduce complexity, now you just look in a different place. You have more loc and a single use function. Maybe inlining is fine and more honest.

  - Major key - be honest, don't play yourself.

* Reducer refactor pt2

-  How about trying something else, to actually reduce code.

- What if we had an abstraction that allows you to target a specific part of a deeply nested object

- What if we could use our selectors, as reducers.

- This won't work. The redux api isn't really designed around this. But I'm getting a feeling we need an abstraction that focuses on a section of an object that could be very useful for both mappers and reducers.

I'm talking about...

* Reducer refactor pt3. - Lenses!

- Now we can use one abstract for bother mappers and reducers.

- To me this is way cleaner. And get ready for another one, your lenses act as both getters and setters, so you get two for one when you write them. Major key, do more with less code. 

- I can stop thinking in terms of reducers now and just think of writing a selector I'll use later to set the value too.

- And amazingly our performance has gone away. 

- Be aware of the tradeoffs.

- One of the fun things about lenses is they look like they compose left to right. It's a little confusing  

- I find working with lenses to be a mental context switch. Depending on the situation it's not always worth it. Composed functions are often good enough.
  
- But what if we want to go deeper abstracting our reducer. We could try lenses cousins.

* Reducer refactor pt4. - Transducers!

- Ok the title of this talk promised that there would be transducers as well. 

- If you have code that is performing a large number of transformations on data transducers make sense. 
- Transducers do this by generalizing your functions to all look like the kind of functions that you would pass to a reducer, composing that function and placing it inside a reducer. 

- I tend to think of composition like creating a tiny conveyer belt, transducing however is s kind of like putting all your functions in a blender.

- What transducers offer is another performance boost when you compose functions together. They do this by skipping intermediate memory allocation. 

- This is pretty mind bending to me.

- I was working replacing reducers with tranducers in our code base to speed things. I was finding that they weren't quite right for my use case and I ended up reverting a large chunk of the code base and focusing on composition instead. 

- You can't always win.

- Swapping reducer functions for transducers is definitely an interesting area but I feel like I'm running out of time anyway.' Check out transducers.js or ramdas transducer function. 

- It would be excellent for complex text filters and form validation.

- But in my case we dont have a that need yet. 

* Keys conclusion

- So thank you for listening to my first ever talk.
  
- Some things to take away.
  - The key is to have every key. Learn a bunch of techniques and compose them.
  - Don't play yourself. Refactor honestly, don't do unnecessary work.
  - Stay away from they. Don't get discouraged if things don't work out or listen to the nay-sayers.

- Here are links to some talks inspired this one. 

** Outro

- I wish you the best of luck and may we all keep winning.
  play outro...

